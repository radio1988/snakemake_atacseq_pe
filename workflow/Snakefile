import sys, os
import pandas as pd
from snakemake.utils import min_version
from scripts.functions import read_meta

min_version("6.14.0")
configfile: 'config/config.yaml'
shell.prefix("""
    
     """)

samples, groups, contrast_names, g2s = read_meta()


def targets_input():
    L = []
    L.append('results/workflow.svg')
    L.append('results/fastqc_raw/fastqc_report.html')
    L.append('results/fastqc_trimmed/fastqc_report.html')
    L.append(['results/{d}/fastqc_report.html'.format(d=d) for d in ['fastqc_raw', 'fastqc_trimmed']])
    L.append(['results/sorted_reads/' + s + '.bam' for s in samples])
    L.append(['results/markDup/' + s + '.bam' for s in samples])
    L.append(['results/dedup/' + s + '.bam' for s in samples])  # test
    L.append(['results/clean_reads/' + s + '.bam' for s in samples])
    L.append(['results/{d}_qc/bamqc_report.html'.format(d=d) for d in ['sorted_reads', 'clean_reads', 'markDup']])
    L.append(['results/genrich/{}.narrowPeak'.format(s) for s in samples])
    L.append(['results/genrich_group/{}.narrowPeak'.format(g) for g in groups])

    return (L)

rule targets:
    input: 
        targets_input()
    resources: 
        mem_mb=lambda wildcards, attempt: attempt * 1000 

include: 'rules/create_dag.smk'
include: 'rules/fastqc.smk'
include: 'rules/trimmomatic.smk'
include: 'rules/bowtie2.smk'
include: 'rules/samtools.smk'
include: 'rules/bam_filter.smk'
include: 'rules/bamqc.smk'
include: 'rules/genrich.smk'
